/**
 * 
 */
package ${basePkg}.search;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.criteria.CriteriaBuilder;
import javax.persistence.criteria.CriteriaQuery;
import javax.persistence.criteria.Predicate;
import javax.persistence.criteria.Root;

import org.springframework.data.jpa.domain.Specification;

/**
 * Title: SearchSpecification <br>
 * Description: Used to generate SearchCriteria list for queries. <br>
 * Copyright: Copyright (c) 2001-${thisYear}<br>
 * Company: ${Company}<br>
 * @author Gened by GenSpring version ${genSpringVersion}<br>
 * @version ${appVersion}<br>
 */
public class SearchSpecification<T> implements Specification<T> {

	private static final long serialVersionUID = 1L;
	private List<SearchCriteria> list;

	public SearchSpecification() {
		this.list = new ArrayList<>();
	}

	public void add(SearchCriteria criteria) {
		list.add(criteria);
	}

	@Override
	public Predicate toPredicate(Root<T> root, CriteriaQuery<?> query, CriteriaBuilder builder) {

		// create a new predicate list
		List<Predicate> predicates = new ArrayList<>();

		// add add criteria to predicates
		for (SearchCriteria criteria : list) {
			if (criteria.getOperation().equals(SearchOperation.GREATER_THAN_EQUAL)) {
				predicates
						.add(builder.greaterThanOrEqualTo(root.get(criteria.getKey()), criteria.getValue().toString()));
			} else if (criteria.getOperation().equals(SearchOperation.LESS_THAN_EQUAL)) {
				predicates.add(builder.lessThanOrEqualTo(root.get(criteria.getKey()), criteria.getValue().toString()));
			} else if (criteria.getOperation().equals(SearchOperation.LIKE)) {
				predicates.add(builder.like(builder.lower(root.get(criteria.getKey())),
						criteria.getValue().toString().toLowerCase()));
			}
		}

		return builder.and(predicates.toArray(new Predicate[0]));
	}
}